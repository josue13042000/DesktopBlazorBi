@page "/adminstracion"
@using BingoDesk.Modelos
@using Newtonsoft.Json;
@using System.Net;
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
<h1 style="font-size: 24px; font-weight: bold; color: #333; text-align: center;">Usuarios</h1>

<div class="ui two column centered grid">
    <div class="row">
        <div class="sixten wide column">
            <select class="form-select form-select-lg mb-3" aria-label="Large select example" @onchange="SeleccionarOpcion">
                <option selected value="Selecciona usuario">Selecciona usuario</option>
                <option value="Global">Global</option>
                @foreach (var item in Usuarios)
                {
                    <option value="@item.UserName">@item.UserName</option>


                }

        
            </select>

            <br />
            <br />



            

        </div>
        @if (OpcionSeleccionada == "Selecciona usuario")
        {

        }
        else
        {
            <div class="sixten wide column" style="margin-top:3rem">
                <div class="ui grid">
                    <div class="four wide column centered">
                        <img class="ui large image" src="/Images/userpc.png" style="width:25rem">

                        <div>

                            <div class="form-check form-switch d-flex justify-content-center">
                                @if (estadoBD == "True")
                                {
                                    <input class="form-check-input" type="checkbox" role="switch" id="@estadoAD" checked style="width:7rem; height:3rem" @onclick="ActualizarEstado">
                                }
                                else
                                {
                                    <input class="form-check-input" type="checkbox" role="switch" id="@estadoAD" style="width:7rem; height:3rem" @onclick="ActualizarEstado">
                                }

                            </div>

                        </div>
                    </div>
                    @if (OpcionSeleccionada == "Global" || OpcionSeleccionada == "Selecciona usuario")
                    {

                    }
                    else
                    {
                        <div class="floated aligned ten wide column">
                            <h3>Nombre: @usuarioSeleccionado.Nombre</h3>
                            <h3>Apellido paterno: @usuarioSeleccionado.Ap_paterno</h3>
                            <h3>Apellido materno: @usuarioSeleccionado.Ap_materno</h3>
                            <h3>Seccion: @usuarioSeleccionado.Seccion</h3>
                            <h3>Telefono: @usuarioSeleccionado.Telefono</h3>
                            <h3>Estado: @usuarioSeleccionado.Estado</h3>
                            <h3>Region: @usuarioSeleccionado.Region</h3>
                            <h3>Municipio: @usuarioSeleccionado.Municipio</h3>
                            <h3>Distrito: @usuarioSeleccionado.Distrito</h3>
                            <h3>Estado: @usuarioSeleccionado.Estado</h3>
                            <h3>Tipo de Usuario: @usuarioSeleccionado.TipoUsuario</h3>
                        </div>

                    }


                </div>



            </div>
        }
     
    </div>
  
</div>










@code {
    List<ModeloUsuarios> Usuarios = new List<ModeloUsuarios>();
    string estadoAD = "Checked";
    ModeloUsuarios usuarioSeleccionado = new ModeloUsuarios();
    public string OpcionSeleccionada = "";
    public string estadoBD = "";
    public async void SeleccionarOpcion(ChangeEventArgs e)
    {
        OpcionSeleccionada = e.Value.ToString();


        if (OpcionSeleccionada == "Global")
        {
            var dato = await GobalQrryDesactivarGlobal();
            estadoBD = dato.Item2;
            StateHasChanged();

        }
        else if (OpcionSeleccionada == "Selecciona usuario")
        {
            Console.WriteLine("Nada");
        }
        else
        {
            await GetUsuarios();
            var a = Usuarios.FirstOrDefault(e => e.UserName == OpcionSeleccionada);
            usuarioSeleccionado = a;
            var estado =  a.Activo;
            estadoBD = estado.ToString();
            StateHasChanged();

        }

    }

    protected override async Task OnInitializedAsync()
    {

        await  GetUsuarios();

        await GobalQrryDesactivarGlobal();

        //  await ActualizarEstado();
    }

    public async Task ActualizarEstado()
    {
        try
        {

            var Endpoint = "Global/Query";
            var Liga = "https://innovasegmx2.eastus2.cloudapp.azure.com/OCR/api/";
            HttpClient cliente = new HttpClient();
            if (OpcionSeleccionada == "Global")
            {
                if (estadoBD == "True") cliente.DefaultRequestHeaders.Add("Cabecera", $"94180508SC4N1N0CR|update[BINGO].[dbo].[Monitoreo] set Activa = '0' where Id = '1'|");
                if (estadoBD == "False") cliente.DefaultRequestHeaders.Add("Cabecera", $"94180508SC4N1N0CR|update[BINGO].[dbo].[Monitoreo] set Activa = '1' where Id = '1'|");



            }
            else
            {
                if (estadoBD == "True") cliente.DefaultRequestHeaders.Add("Cabecera", $"94180508SC4N1N0CR|update [BINGO].[dbo].[Usuarios] set Activo='0' where UserName = '{OpcionSeleccionada}'|");
                if (estadoBD == "False") cliente.DefaultRequestHeaders.Add("Cabecera", $"94180508SC4N1N0CR|update [BINGO].[dbo].[Usuarios] set Activo='1' where UserName  = '{OpcionSeleccionada}'|");

            }




            HttpResponseMessage respuesta = await cliente.GetAsync(Liga + Endpoint);

            if (respuesta.StatusCode == HttpStatusCode.OK)
            {



                var r = await respuesta.Content.ReadAsStringAsync();
                // Usuarios = JsonConvert.DeserializeObject<List<ModeloUsuarios>>(r);
                //   HttpClient cliente2 = new HttpClient();

                //HttpResponseMessage respuesta2 = await cliente2.GetAsync(Liga + Endpoint);
                //  StateHasChanged();
                if (OpcionSeleccionada == "Global")
                {
                    var dato = await GobalQrryDesactivarGlobal();
                    estadoBD = dato.Item2;
                    StateHasChanged();

                }
                else
                {
                    await GetUsuarios();
                    var a = Usuarios.FirstOrDefault(e => e.UserName == OpcionSeleccionada);
                    var estado = a.Activo;
                    estadoBD = estado.ToString();
                    StateHasChanged();
                    
                }

            }
            else
            {

               // return (await respuesta.Content.ReadAsStringAsync(), Usuarios);
            }

        }
        catch (Exception)
        {
            
            throw;
        }
    }

    private async Task<(string, List<ModeloUsuarios>)> GetUsuarios()
    {

   
  

        try
        {
            var Endpoint = "Usuarios/GetUsuarios";
            var Liga = "https://innovasegmx2.eastus2.cloudapp.azure.com/OCR/api/";
            HttpClient cliente = new HttpClient();
            cliente.DefaultRequestHeaders.Add("Cabecera", $"94180508SC4N1N0CR||");          

            HttpResponseMessage respuesta = await cliente.GetAsync(Liga + Endpoint);

            if (respuesta.StatusCode == HttpStatusCode.OK)
            {
                var r = await respuesta.Content.ReadAsStringAsync();
                Usuarios = JsonConvert.DeserializeObject<List<ModeloUsuarios>>(r);
             //   HttpClient cliente2 = new HttpClient();
               
             //HttpResponseMessage respuesta2 = await cliente2.GetAsync(Liga + Endpoint);
                return ("OK", Usuarios);


            }
            else
            {
    
                return (await respuesta.Content.ReadAsStringAsync(), Usuarios);
            }
        }
        catch (Exception ex)
        {
        
            return (ex.Message, Usuarios);
        }
    }


    private async Task<(string,string)> GobalQrryDesactivarGlobal()
    {




        try
        {
            var Endpoint = "Global/GetDato";
            var Liga = "https://innovasegmx2.eastus2.cloudapp.azure.com/OCR/api/";
            HttpClient cliente = new HttpClient();
            cliente.DefaultRequestHeaders.Add("Cabecera", $"94180508SC4N1N0CR|select Activa from [BINGO].[dbo].[Monitoreo] where id = '1'|BOL");
            HttpResponseMessage respuesta = await cliente.GetAsync(Liga + Endpoint);

            if (respuesta.StatusCode == HttpStatusCode.OK)
            {
                var r = await respuesta.Content.ReadAsStringAsync();



                return ("OK", r);



              

            }
            else
            {

                return (await respuesta.Content.ReadAsStringAsync(), "error");
            }
        }
        catch (Exception ex)
        {

            return (ex.Message, "error");
        }
    }
}
